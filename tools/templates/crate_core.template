/*
    BSD 3-Clause License

    Copyright (c) 2025, Guillaume GOBIN (Guitheg)

    Redistribution and use in source and binary forms, with or without modification,
    are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation and/or
    other materials provided with the distribution.

    3. Neither the name of the copyright holder nor the names of its contributors
    may be used to endorse or promote products derived from this software without
    specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
    List of contributors:
    - ${ContributorName}: Initial implementation
*/

/*
    TODO: REMOVE IF NOT APPLICABLE
    Inspired by TA-LIB ${INDICATORNAME} implementation
*/

//! (TODO: COMPLETE NAME) (${INDICATORNAME}) implementation

use crate::errors::TechalibError;
use crate::types::Float;
use crate::traits::State;

/// ${INDICATORNAME} calculation result
/// ---
/// This struct holds the result and the state ([`${IndicatorName}State`])
/// of the calculation.
///
/// Attributes
/// ---
/// TODO: ATTRIBUTES
/// - `values`: A vector of [`Float`] representing the calculated values.
/// - `state`: A [`${IndicatorName}State`], which can be used to calculate
///   the next values incrementally.
#[derive(Debug)]
pub struct ${IndicatorName}Result {
    // TODO: IMPLEMENTS RESULT ATTRIBUTES
    pub values: Vec<Float>,
    /// The [`${IndicatorName}State`] state of the ${INDICATORNAME} calculation.
    pub state: ${IndicatorName}State,
}

/// ${INDICATORNAME} calculation state
/// ---
/// This struct holds the state of the calculation.
/// It is used to calculate the next values in a incremental way.
///
/// Attributes
/// ---
/// **Last outputs values**
/// - `${indicator_name}`: The last calculated value.
///
/// **State values**
/// TODO: STATE ATTRIBUTES
///
/// **Parameters**
/// TODO: PARAMETERS ATTRIBUTES
#[derive(Debug, Clone, Copy)]
pub struct ${IndicatorName}State {
    // TODO: IMPLEMENTS OUTPUTS ATTRIBUTES
    // Outputs
    /// The last calculated value.
    pub ${indicator_name}: Float,

    // TODO: IMPLEMENTS STATE ATTRIBUTES
    // State values

    // TODO: IMPLEMENTS PARAMETERS ATTRIBUTES
    // Parameters
    /// The period used for the calculation.
    pub period: usize
}

impl State<Float> for ${IndicatorName}State {
    /// Update the [`${IndicatorName}State`] with a new sample
    ///
    /// Input Arguments
    /// ---
    /// - `sample`: The new input to update the ${INDICATORNAME} state
    fn update(&mut self, sample: Float) -> Result<(), TechalibError> {
        TechalibError::check_finite(sample, "sample")?;
        TechalibError::check_period(self.period)?;
        // TODO: IMPLEMENTS UPDATE METHODS

        Ok(())
    }
}

/// Lookback period for ${INDICATORNAME} calculation
/// ---
/// With `n = lookback_from_period(period)`,
/// the `n-1` first values that will be return will be `NaN`
/// The n-th value will be the first valid value,
#[inline(always)]
pub fn lookback_from_period(period: usize) -> Result<usize, TechalibError> {
    TechalibError::check_period(period)?;
    Ok(period)
}


/// Calculation of the ${INDICATORNAME} function
/// ---
/// It returns a [`${IndicatorName}Result`]
/// TODO: DESCRIPTION
///
/// Input Arguments
/// ---
/// TODO: INPUT ARGS DESCRIPTION
/// - `data`: A slice of [`Float`] representing the input data.
/// - `period`: The period for the calculation.
///
/// Returns
/// ---
/// A `Result` containing a [`${IndicatorName}Result`],
/// or a [`TechalibError`] error if the calculation fails.
pub fn ${indicator_name}(
    data: &[Float],
    period: usize
    // TODO: DEFINE ARGUMENTS OF INDICATOR FUNCTION
) -> Result<${IndicatorName}Result, TechalibError> {
    // TODO: INITIALIZE OUTPUTS
    let mut output = vec![0.0; data.len()];

    let ${indicator_name}_state = ${indicator_name}_into(
        data,
        period,
        output.as_mut_slice()
        // TODO: ARGUMENTS AND OUTPUTS ARGUMENTS
    )?;

    Ok(${IndicatorName}Result {
        // TODO: OUTPUT AND STATES TO RESULT
        values: output,
        state: ${indicator_name}_state
    })
}

/// Calculation of the ${INDICATORNAME} function
/// ---
/// It stores the results in the provided output arrays and
/// return the state [`${IndicatorName}State`].
/// TODO: DESCRIPTION
///
/// Input Arguments
/// ---
/// TODO: INPUT ARGS DESCRIPTIONS
/// - `data`: A slice of [`Float`] representing the input data.
/// - `period`: The period for the calculation.
///
/// Output Arguments
/// ---
/// TODO: OUTPUT ARGS DESCRIPTIONS
/// - `output`: A mutable slice of [`Float`] where the calculated values will be stored.
///
/// Returns
/// ---
/// A `Result` containing a [`${IndicatorName}State`],
/// or a [`TechalibError`] error if the calculation fails.
pub fn ${indicator_name}_into(
    data: &[Float],
    period: usize,
    output: &mut [Float],
    // TODO: ARGUMENTS AND OUTPUTS ARGUMENTS
) -> Result<${IndicatorName}State, TechalibError> {
    TechalibError::check_same_length(
        ("output", output),
        ("data", data)
    )?;

    let len = data.len();
    let lookback = lookback_from_period(period)?;

    if len <= lookback {
        return Err(TechalibError::InsufficientData);
    }

    // TODO: IMPLEMENTS CORE FUNCTION LOGIC

    let output_value =
        init_${indicator_name}_unchecked(data, lookback, output)?;
    output[lookback] = output_value;
    TechalibError::check_overflow_at(lookback, output)?;

    for idx in lookback + 1..len {
        TechalibError::check_finite_at(idx, data)?;

        output[idx] = ${indicator_name}_next_unchecked(data[idx]);

        TechalibError::check_overflow_at(idx, output)?;
    }

    Ok(${IndicatorName}State {
        ${indicator_name}: output[len-1],
        period
    })
}

#[inline(always)]
fn init_${indicator_name}_unchecked(
    data: &[Float],
    lookback: usize,
    output: &mut [Float]
    // TODO: DEFINIE INIT ARGUMENTS
) -> Result<Float, TechalibError> {
    // TODO: IMPLEMENTS INIT
    for idx in 0..lookback {
        TechalibError::check_finite_at(idx, data)?;

        output[idx] = Float::NAN;
    }
    Ok(0.0)
}

#[inline(always)]
fn ${indicator_name}_next_unchecked(
    new_value: Float,
    // TODO: CORE ARGUMENTS FOR INCREMENTAL
) -> Float {
    // TODO: IMPLEMENTS CORE INCREMENTAL LOGIC
    0.0
}
